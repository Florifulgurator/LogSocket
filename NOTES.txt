CONTENTS
*A) Programming 
*B) Logging/tracing/debughging
*C) Different WebSocket implementations, technical details
*D) Benchmarks

*********************************************
* A) LogSocketServer.java programming notes *
*************'*******************************

// javax.websocket:
// * By default, there is one instance of an Endpoint per client (i.e. WsSession) unless this behavior is overridden by a custom Configurator implementation.
// * The container will allow only one thread (per client) to enter the (lifecycle callback) methods of the server endpoint. In case there is a custom Configurator implementation which changes this semantic e.g. provide a singleton endpoint, then multiple threads will be able to invoke this instance concurrently and thread safety has to be built in explicitly.
// * Typically, each Session instance registers (via the addMessageHandler method) a separate instance of a MessageHandler i.e. there is a one-to-one relation b/w the peer who is sending a message (client), the Session (let's assume it's on the server end) and the MessageHandler instance (in this case it's responsible for receiving messages on the server side).
// * The container will do as much as it can do ensure thread safety i.e. in case of MessageHandlers, it makes sure that only one thread [per WsSession! - Martin] enters a specific MessageHandler instance. In case the developer implementation is such that a single MessageHandler instance is registered to multiple Sessions, then concurrent access is inevitable and this needs to be accounted for.

// javax.websocket: Excellent book from the master himself, Dr. Danny Coward:
// #DDC https://www.oreilly.com/library/view/java-javax.websocket-programming/9780071827195/

https://abhirockzz.wordpress.com/tag/websocket/
//-------

// JDK 11 java.net.http.WebSocket:
// Kishori Sharan: Java 13 Revealed For Early Adoption and Migration Second Edition (2019)


// https://www.oracle.com/technical-resources/articles/java/jsr356.html


//TODO synchronized / locks for optimized performance.
//     https://www.baeldung.com/java-synchronized https://www.baeldung.com/java-atomic-variables https://www.baeldung.com/java-volatile-variables-thread-safety
//     https://www.baeldung.com/lock-free-programming
//     https://winterbe.com/posts/2015/04/30/java8-concurrency-tutorial-synchronized-locks-examples/
// Or?
//  Bottom line: if you can use synchronized() instead of Lock, then you definitely should use synchronized().
//  https://medium.com/liveramp-engineering/java-performance-synchronized-vs-lock-301130e62f47
//  https://github.com/bryanduxbury/sync_vs_lock/blob/master/LockVsSync.java
// But:
//  https://blog.qaware.de/posts/locking-java-8/
// Hmmm...
// Even so, RWLocks are just not fast enough, and at times prove to be really darn slow, to the point of not being worth bothering with.
// ...folks at the JDK not giving up, and are now back with the new StampedLock. This RW lock employs a new set of algorithms and
// memory fencing features added to the Java 8 JDK to help make this lock faster and more robust.
// ...unlike RWLocks, StampedLocks are not reentrant. So while they may be faster, they have the downside that threads can now deadlock against themselves.
// In practice, this means that more than ever, you should make sure that locks and stamps do not escape their enclosing code blocks.
// https://www.javacodegeeks.com/2014/06/java-8-stampedlocks-vs-readwritelocks-and-synchronized.html


//TODO ? StringBuilder ? StringJoiner ? Text Blocks ?
//      https://dzone.com/articles/jdk-9jep-280-string-concatenations-will-never-be-t
//         JDK 9/JEP 280: String Concatenations Will Never Be the Same
//      https://www.baeldung.com/java-strings-concatenation
//      https://www.baeldung.com/java-string-concatenation-methods
//      https://todd.ginsberg.com/post/java-17/ten-things-i-love/


//-----------------------------------------------------------------------------


*************************************************
* B) General notes on logging/tracing/debugging *
*  and tools                                    *
*************************************************

From https://sematext.com/blog/slf4j-tutorial/:

TRACE – log events with this level are the most fine-grained and are usually not needed unless you need to have the full visibility of what is happening in your application and inside the third-party libraries that you use. You can expect the TRACE logging level to be very verbose.
DEBUG – less granular compared to the TRACE level, but still more than you will need in everyday use. The DEBUG log level should be used for information that may be needed for deeper diagnostics and troubleshooting.
INFO – the standard log level indicating that something happened, application processed a request, etc. The information logged using the INFO log level should be purely informative and not looking into them on a regular basis shouldn’t result in missing any important information.
WARN – the log level that indicates that something unexpected happened in the application. For example a problem, or a situation that might disturb one of the processes, but the whole application is still working.
ERROR – the log level that should be used when the application hits an issue preventing one or more functionalities from properly functioning. The ERROR log level can be used when one of the payment systems is not available, but there is still the option to check out the basket in the e-commerce application or when your social media logging option is not working for some reason. You can also see the ERROR log level associated with exceptions.

//-----------------------------------------------------------------------------

RFC 5424                  The Syslog Protocol                 March 2009


           Numerical         Severity
             Code

              0       Emergency: system is unusable
              1       Alert: action must be taken immediately
              2       Critical: critical conditions
              3       Error: error conditions
              4       Warning: warning conditions
              5       Notice: normal but significant condition
              6       Informational: informational messages
              7       Debug: debug-level messages

              Table 2. Syslog Message Severities

   The Priority value is calculated by first multiplying the Facility
   number by 8 and then adding the numerical value of the Severity.  For
   example, a kernel message (Facility=0) with a Severity of Emergency
   (Severity=0) would have a Priority value of 0.  Also, a "local use 4"
   message (Facility=20) with a Severity of Notice (Severity=5) would
   have a Priority value of 165.  In the PRI of a syslog message, these
   values would be placed between the angle brackets as <0> and <165>
   respectively.  The only time a value of "0" follows the "<" is for
   the Priority value of "0".  Otherwise, leading "0"s MUST NOT be used
//-----------------------------------------------------------------------------





*************************************************************
* C) Different WebSocket implementations, technical details *
*************************************************************

java.net.http.WebSocket:

https://stackoverflow.com/a/55464326/3123382

https://stackoverflow.com/questions/56798738/websocket-implementation-in-java-11

https://tradermade.com/tutorials/real-time-forex-cfd-and-crypto-websocket-with-java

April 28, 2019  Java theory and practice: Explore the new Java SE 11 HTTP Client and WebSocket APIs
https://developer.ibm.com/tutorials/java-theory-and-practice-3/

//-----------------------------------------------------------------------------

August 2018 https://www.researchgate.net/publication/330298316_Performance_Comparison_and_Evaluation_of_WebSocket_Frameworks_Netty_Undertow_Vertx_Grizzly_and_Jetty


*****************
* D) Benchmarks *
*****************

JavaLoop 1000 WebSocketImpl2 412.25ms,89.64ms,78.52ms,69.93ms
JSLoop: 176.46ms,183.58ms,114.2ms,175.72ms

JavaLoop 1000 WebSocketImpl1 453.72ms,146.82ms,162.38ms,136.87ms
JSLoop: 151.5ms, 200.69ms,150.11ms,122.33ms


N=3500 Min=62.9 Max=8267.7 Median=116 Mean=173.4
--------------------------------------------------
|#=   (61) 62.9 ~ 76.8μs
|########   (283) 78.5 ~ 90.7μs
|#########################   (870) 90.8 ~ 104.7μs
%#################-   (604) 104.8 ~ 118.6μs
|##############=   (516) 118.7 ~ 132.5μs
|#############-   (462) 132.6 ~ 146.5μs
|#####   (176) 146.6 ~ 160.3μs
+##=   (93) 160.7 ~ 174.1μs
|#=   (61) 174.6 ~ 188.2μs
|#-   (51) 188.5 ~ 201.8μs
|#   (36) 203.1 ~ 215.7μs
|#   (35) 216.4 ~ 228.5μs
|=   (22) 230.2 ~ 243.7μs
|-   (17) 245 ~ 257.7μs
|-   (7) 258.5 ~ 267.3μs
|-   (12) 272.4 ~ 285.1μs
|-   (13) 285.9 ~ 298.6μs
|-   (7) 300.3 ~ 313.2μs
|-   (9) 314.5 ~ 326.9μs
|-   (9) 327.7 ~ 340.7μs
|   (3) 343.9 ~ 353.7μs
|   (5) 357.8 ~ 368.8μs
|-   (9) 375.7 ~ 382.8μs
|-   (7) 385.4 ~ 394.5μs
|   (3) 399.7 ~ 402μs
⋮
|   (129) 431.6 ~ 5736.7, 5904.2, 8267.7μs
--------------------------------------------------
Skew:4,7 "%"=Median "+"=Mean 
